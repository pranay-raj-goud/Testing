# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16AKRV1yN928nGnGlFge_NXDDIHN9N4C8
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import pandas as pd
import os
# Load the dataset
input_file_path = r'/content/drive/MyDrive/StudentID/Input Template v1.xlsx'
data = pd.read_excel(input_file_path)
# Display the data loaded for debugging
print("Data Loaded:")
print(data)
# Define default parameters
default_params = "School_ID,Grade,student_no"
# Fill missing values in key columns with "NA" or a default value
Y = int(input("Enter the Partner ID: "))  # Directly input the State ID
data['District'].fillna("NA", inplace=True)
data['Block'].fillna("NA", inplace=True)
data['School_ID'].fillna("NA", inplace=True)
data['Required_Parameters'].fillna(default_params, inplace=True)
# Enter a value for Buffer (since Buffer column is removed)
X = int(input("Enter a value for Buffer: "))
# Enter the grade value
Z = int(input("Enter the Grade:"))
data['Grade'] = Z
# Directly assign the State_ID from the input value `Y`
data['State_ID'] = str(Y).zfill(len(str(Y)))  # Padding State_ID
# Enter and validate the number of digits for ID columns
A = int(input("Enter the number of digits for District ID: "))
B = int(input("Enter the number of digits for Block ID: "))
C = int(input("Enter the number of digits for School ID: "))
# Enter and validate the number of digits for Student ID
D = int(input("Enter the number of digits for Student ID: "))
# Assign unique IDs for District, Block, and School, default to "00" for missing values
data['District_ID'] = data['District'].apply(lambda x: str(data['District'].unique().tolist().index(x) + 1).zfill(A) if x != "NA" else "0".zfill(A))
data['Block_ID'] = data['Block'].apply(lambda x: str(data['Block'].unique().tolist().index(x) + 1).zfill(B) if x != "NA" else "0".zfill(B))
data['School_ID'] = data['School_ID'].apply(lambda x: str(data['School_ID'].unique().tolist().index(x) + 1).zfill(C) if x != "NA" else "0".zfill(C))
# Print IDs to verify correct assignment
print("Assigned IDs:")
print(data[['State_ID', 'District_ID', 'Block_ID', 'School_ID']])
# Define the generate_custom_id function based on Required_Parameters
def generate_custom_id(row, params):
    params_split = params.split(',')
    custom_id = []
    for param in params_split:
        if param in row and pd.notna(row[param]):
            value = row[param]
            if isinstance(value, float) and value % 1 == 0:
                value = int(value)
            custom_id.append(str(value))
    return ''.join(custom_id)
# Calculate Total Students With Buffer based on the provided or default buffer percentage
data['Total_Students_With_Buffer'] = np.floor(data['Total_Students'] * (1 + X / 100))
# Print the calculated total students with buffer
print("Total Students With Buffer:")
print(data[['Total_Students', 'Total_Students_With_Buffer']])
# Generate student IDs based on the calculated Total Students With Buffer
def generate_student_ids(row):
    if pd.notna(row['Total_Students_With_Buffer']) and row['Total_Students_With_Buffer'] > 0:
        student_ids = [
            f"{row['School_ID']}{str(int(row['Grade'])).zfill(2)}{str(i).zfill(D)}"
            for i in range(1, int(row['Total_Students_With_Buffer']) + 1)
        ]
        return student_ids
    return []
# Apply student ID generation to all rows
data['Student_IDs'] = data.apply(generate_student_ids, axis=1)
# Print the generated Student IDs for debugging
print("Generated Student IDs:")
print(data[['School_ID', 'Student_IDs']])
# Expand the data frame to have one row per student ID
data_expanded = data.explode('Student_IDs')
# Extract student number from the ID
data_expanded['student_no'] = data_expanded['Student_IDs'].str[-D:]
# Print the expanded data
print("Expanded Data with Student Numbers:")
print(data_expanded[['School_ID', 'Student_IDs', 'student_no']])
# Use Required_Parameters for generating Custom_ID
data_expanded['Required_Parameters'] = data['Required_Parameters'].iloc[0]  # Use the first non-null value
# Generate the final custom IDs based on the Required Parameters
data_expanded['Custom_ID'] = data_expanded.apply(lambda row: generate_custom_id(row, row['Required_Parameters']), axis=1)
# Print the custom IDs generated
print("Generated Custom IDs:")
print(data_expanded[['Student_IDs', 'Custom_ID']])
# Determine the directory of the input file
directory = os.path.dirname(input_file_path)
# Define the output file paths
output_file_path1 = os.path.join(directory, "Student_Ids.xlsx")
output_file_path2 = os.path.join(directory, "Student_Ids_Mapped.xlsx")
# Export the original Student_Ids.xlsx sheet
data_expanded.to_excel(output_file_path1, index=False)
# Generate the additional Excel sheet with mapped columns
data_mapped = data_expanded[['Custom_ID', 'Grade', 'School','School_ID', 'District', 'Block']].copy()
data_mapped.columns = ['Roll_Number', 'Grade', 'School Name','School Code', 'District Name', 'Block Name']
data_mapped['Gender'] = np.random.choice(['Male', 'Female'], size=len(data_mapped), replace=True)
# Export the mapped data to a new Excel file
data_mapped.to_excel(output_file_path2, index=False)

import numpy as np
import pandas as pd
import os
import ipywidgets as widgets
from IPython.display import display
import io

# Create a file upload widget
upload = widgets.FileUpload(
    accept='.xlsx',  # Accept only Excel files
    multiple=False  # Do not allow multiple file uploads
)

# Display the widget
display(upload)

# Define the parameter descriptions
parameter_descriptions = {
    'A1': "Block_ID, Grade, student_no: Uses Block_ID, Grade, and student_no to generate the ID.",
    'A2': "School_ID, Grade, student_no: Uses School_ID, Grade, and student_no to generate the ID.",
    'A3': "District_ID, School_ID, Grade, student_no: Uses District_ID, School_ID, Grade, and student_no to generate the ID.",
    'A4': "District_ID, Grade, student_no: Uses District_ID, Grade, and student_no to generate the ID.",
    'A5': "Partner_ID, Grade, student_no: Uses Partner_ID, Grade, and student_no to generate the ID.",
    'A6': "District_ID, Block_ID, Grade, student_no: Uses District_ID, Block_ID, Grade, and student_no to generate the ID.",
    'A7': "Block_ID, School_ID, Grade, student_no: Uses Block_ID, School_ID, Grade, and student_no to generate the ID.",
    'A8': "Partner_ID, Block_ID, Grade, student_no: Uses Partner_ID, Block_ID, Grade, and student_no to generate the ID.",
    'A9': "Partner_ID, District_ID, Grade, student_no: Uses Partner_ID, District_ID, Grade, and student_no to generate the ID.",
    'A10': "Partner_ID, School_ID, Grade, student_no: Uses Partner_ID, School_ID, Grade, and student_no to generate the ID."
}

# Function to load the file after it's uploaded
def load_file(change):
    uploaded_file = list(upload.value.values())[0]
    input_file = io.BytesIO(uploaded_file['content'])
    data = pd.read_excel(input_file)

    # Display the data loaded for debugging
    print("Data Loaded:")
    print(data)

    # Define the mapping for parameter sets
    parameter_mapping = {
        'A1': "Block_ID,Grade,student_no",
        'A2': "School_ID,Grade,student_no",
        'A3': "District_ID,School_ID,Grade,student_no",
        'A4': "District_ID,Grade,student_no",
        'A5': "Partner_ID,Grade,student_no",
        'A6': "District_ID,Block_ID,Grade,student_no",
        'A7': "Block_ID,School_ID,Grade,student_no",
        'A8': "Partner_ID,Block_ID,Grade,student_no",
        'A9': "Partner_ID,District_ID,Grade,student_no",
        'A10': "Partner_ID,School_ID,Grade,student_no"
    }

    # Create widgets for selecting the parameter set and entering values
    param_dropdown = widgets.Dropdown(
        options=list(parameter_mapping.keys()),
        description='Select Param Set:',
        disabled=False,
    )

    description_label = widgets.Label(
        value='Select a parameter set to see the description.'
    )

    partner_id_text = widgets.IntText(
        description='Partner ID:',
        value=0
    )
    buffer_text = widgets.FloatText(
        description='Buffer (%):',
        value=30.0
    )
    grade_text = widgets.IntText(
        description='Grade:',
        value=1
    )
    district_digits = widgets.IntText(
        description='District ID Digits:',
        value=2
    )
    block_digits = widgets.IntText(
        description='Block ID Digits:',
        value=2
    )
    school_digits = widgets.IntText(
        description='School ID Digits:',
        value=3
    )
    student_digits = widgets.IntText(
        description='Student ID Digits:',
        value=4
    )
    confirm_button = widgets.Button(description="Confirm Selection")

    # Display all widgets
    display(param_dropdown, description_label, partner_id_text, buffer_text, grade_text,
            district_digits, block_digits, school_digits, student_digits,
            confirm_button)

    def on_param_change(change):
        param = change.new
        description_label.value = parameter_descriptions.get(param, 'No description available.')

    def on_button_click(b):
        # Collect the selected values
        selected_param = param_dropdown.value
        Y = partner_id_text.value
        X = buffer_text.value
        Z = grade_text.value
        A = district_digits.value
        B = block_digits.value
        C = school_digits.value
        D = student_digits.value

        # Continue with processing the data using the selected parameter set
        data['District'].fillna("NA", inplace=True)
        data['Block'].fillna("NA", inplace=True)
        data['School_ID'].fillna("NA", inplace=True)

        # Assign the Partner_ID directly
        data['Partner_ID'] = str(Y).zfill(len(str(Y)))  # Padding Partner_ID
        data['Grade'] = Z

        # Assign unique IDs for District, Block, and School, default to "00" for missing values
        data['District_ID'] = data['District'].apply(lambda x: str(data['District'].unique().tolist().index(x) + 1).zfill(A) if x != "NA" else "0".zfill(A))
        data['Block_ID'] = data['Block'].apply(lambda x: str(data['Block'].unique().tolist().index(x) + 1).zfill(B) if x != "NA" else "0".zfill(B))
        data['School_ID'] = data['School_ID'].apply(lambda x: str(data['School_ID'].unique().tolist().index(x) + 1).zfill(C) if x != "NA" else "0".zfill(C))

        # Print IDs to verify correct assignment
        print("Assigned IDs:")
        print(data[['Partner_ID', 'District_ID', 'Block_ID', 'School_ID']])

        # Define the generate_custom_id function based on the selected parameter set
        def generate_custom_id(row, params):
            params_split = params.split(',')
            custom_id = []
            for param in params_split:
                if param in row and pd.notna(row[param]):
                    value = row[param]
                    if isinstance(value, float) and value % 1 == 0:
                        value = int(value)
                    custom_id.append(str(value))
            return ''.join(custom_id)

        # Calculate Total Students With Buffer based on the provided buffer percentage
        data['Total_Students_With_Buffer'] = np.floor(data['Total_Students'] * (1 + X / 100))

        # Print the calculated total students with buffer
        print("Total Students With Buffer:")
        print(data[['Total_Students', 'Total_Students_With_Buffer']])

        # Generate student IDs based on the calculated Total Students With Buffer
        def generate_student_ids(row):
            if pd.notna(row['Total_Students_With_Buffer']) and row['Total_Students_With_Buffer'] > 0:
                student_ids = [
                    f"{row['School_ID']}{str(int(row['Grade'])).zfill(2)}{str(i).zfill(D)}"
                    for i in range(1, int(row['Total_Students_With_Buffer']) + 1)
                ]
                return student_ids
            return []

        # Apply student ID generation to all rows
        data['Student_IDs'] = data.apply(generate_student_ids, axis=1)

        # Print the generated Student IDs for debugging
        print("Generated Student IDs:")
        print(data[['School_ID', 'Student_IDs']])

        # Expand the data frame to have one row per student ID
        data_expanded = data.explode('Student_IDs')

        # Extract student number from the ID
        data_expanded['student_no'] = data_expanded['Student_IDs'].str[-D:]

        # Print the expanded data
        print("Expanded Data with Student Numbers:")
        print(data_expanded[['School_ID', 'Student_IDs', 'student_no']])

        # Use the selected parameter set for generating Custom_ID
        data_expanded['Custom_ID'] = data_expanded.apply(lambda row: generate_custom_id(row, parameter_mapping[selected_param]), axis=1)

        # Print the custom IDs generated
        print("Generated Custom IDs:")
        print(data_expanded[['Student_IDs', 'Custom_ID']])

        # Define the output file paths
        output_file_path1 = "Student_Ids.xlsx"
        output_file_path2 = "Student_Ids_Mapped.xlsx"

        # Export the original Student_Ids.xlsx sheet
        data_expanded.to_excel(output_file_path1, index=False)

        # Generate the additional Excel sheet with mapped columns
        data_mapped = data_expanded[['Custom_ID', 'Grade', 'School', 'School_ID', 'District', 'Block']].copy()
        data_mapped.columns = ['Roll_Number', 'Grade', 'School Name', 'School Code', 'District Name', 'Block Name']
        data_mapped['Gender'] = np.random.choice(['Male', 'Female'], size=len(data_mapped), replace=True)

        # Export the mapped data to a new Excel file
        data_mapped.to_excel(output_file_path2, index=False)
        print("Files saved as Student_Ids.xlsx and Student_Ids_Mapped.xlsx")

    param_dropdown.observe(on_param_change, names='value')
    confirm_button.on_click(on_button_click)

# Register the file upload handler
upload.observe(load_file, names='value')

import streamlit as st
import pandas as pd
import numpy as np
import io

# Define the parameter descriptions
parameter_descriptions = {
    'A1': "Block_ID, Grade, student_no: Uses Block_ID, Grade, and student_no to generate the ID.",
    'A2': "School_ID, Grade, student_no: Uses School_ID, Grade, and student_no to generate the ID.",
    'A3': "District_ID, School_ID, Grade, student_no: Uses District_ID, School_ID, Grade, and student_no to generate the ID.",
    'A4': "District_ID, Grade, student_no: Uses District_ID, Grade, and student_no to generate the ID.",
    'A5': "Partner_ID, Grade, student_no: Uses Partner_ID, Grade, and student_no to generate the ID.",
    'A6': "District_ID, Block_ID, Grade, student_no: Uses District_ID, Block_ID, Grade, and student_no to generate the ID.",
    'A7': "Block_ID, School_ID, Grade, student_no: Uses Block_ID, School_ID, Grade, and student_no to generate the ID.",
    'A8': "Partner_ID, Block_ID, Grade, student_no: Uses Partner_ID, Block_ID, Grade, and student_no to generate the ID.",
    'A9': "Partner_ID, District_ID, Grade, student_no: Uses Partner_ID, District_ID, Grade, and student_no to generate the ID.",
    'A10': "Partner_ID, School_ID, Grade, student_no: Uses Partner_ID, School_ID, Grade, and student_no to generate the ID."
}

# Define the mapping for parameter sets
parameter_mapping = {
    'A1': "Block_ID,Grade,student_no",
    'A2': "School_ID,Grade,student_no",
    'A3': "District_ID,School_ID,Grade,student_no",
    'A4': "District_ID,Grade,student_no",
    'A5': "Partner_ID,Grade,student_no",
    'A6': "District_ID,Block_ID,Grade,student_no",
    'A7': "Block_ID,School_ID,Grade,student_no",
    'A8': "Partner_ID,Block_ID,Grade,student_no",
    'A9': "Partner_ID,District_ID,Grade,student_no",
    'A10': "Partner_ID,School_ID,Grade,student_no"
}

def generate_custom_id(row, params):
    params_split = params.split(',')
    custom_id = []
    for param in params_split:
        if param in row and pd.notna(row[param]):
            value = row[param]
            if isinstance(value, float) and value % 1 == 0:
                value = int(value)
            custom_id.append(str(value))
    return ''.join(custom_id)

def process_data(uploaded_file, partner_id, buffer_percent, grade, district_digits, block_digits, school_digits, student_digits, selected_param):
    data = pd.read_excel(uploaded_file)

    # Assign the Partner_ID directly
    data['Partner_ID'] = str(partner_id).zfill(len(str(partner_id)))  # Padding Partner_ID
    data['Grade'] = grade

    # Assign unique IDs for District, Block, and School, default to "00" for missing values
    data['District_ID'] = data['District'].apply(lambda x: str(data['District'].unique().tolist().index(x) + 1).zfill(district_digits) if x != "NA" else "0".zfill(district_digits))
    data['Block_ID'] = data['Block'].apply(lambda x: str(data['Block'].unique().tolist().index(x) + 1).zfill(block_digits) if x != "NA" else "0".zfill(block_digits))
    data['School_ID'] = data['School_ID'].apply(lambda x: str(data['School_ID'].unique().tolist().index(x) + 1).zfill(school_digits) if x != "NA" else "0".zfill(school_digits))

    # Calculate Total Students With Buffer based on the provided buffer percentage
    data['Total_Students_With_Buffer'] = np.floor(data['Total_Students'] * (1 + buffer_percent / 100))

    # Generate student IDs based on the calculated Total Students With Buffer
    def generate_student_ids(row):
        if pd.notna(row['Total_Students_With_Buffer']) and row['Total_Students_With_Buffer'] > 0:
            student_ids = [
                f"{row['School_ID']}{str(int(row['Grade'])).zfill(2)}{str(i).zfill(student_digits)}"
                for i in range(1, int(row['Total_Students_With_Buffer']) + 1)
            ]
            return student_ids
        return []

    data['Student_IDs'] = data.apply(generate_student_ids, axis=1)

    # Expand the data frame to have one row per student ID
    data_expanded = data.explode('Student_IDs')

    # Extract student number from the ID
    data_expanded['student_no'] = data_expanded['Student_IDs'].str[-student_digits:]

    # Use the selected parameter set for generating Custom_ID
    data_expanded['Custom_ID'] = data_expanded.apply(lambda row: generate_custom_id(row, parameter_mapping[selected_param]), axis=1)

    # Generate the additional Excel sheet with mapped columns
    data_mapped = data_expanded[['Custom_ID', 'Grade', 'School', 'School_ID', 'District', 'Block']].copy()
    data_mapped.columns = ['Roll_Number', 'Grade', 'School Name', 'School Code', 'District Name', 'Block Name']
    data_mapped['Gender'] = np.random.choice(['Male', 'Female'], size=len(data_mapped), replace=True)

    return data_expanded, data_mapped

def main():
    st.title("Student ID Generator")

    uploaded_file = st.file_uploader("Upload an Excel file", type=["xlsx"])

    if uploaded_file is not None:
        st.write("File uploaded successfully!")

        partner_id = st.number_input("Partner ID", min_value=0, value=0)
        buffer_percent = st.number_input("Buffer (%)", min_value=0.0, max_value=100.0, value=30.0)
        grade = st.number_input("Grade", min_value=1, value=1)
        district_digits = st.number_input("District ID Digits", min_value=1, value=2)
        block_digits = st.number_input("Block ID Digits", min_value=1, value=2)
        school_digits = st.number_input("School ID Digits", min_value=1, value=3)
        student_digits = st.number_input("Student ID Digits", min_value=1, value=4)

        selected_param = st.selectbox("Select Parameter Set", list(parameter_mapping.keys()))
        st.write(parameter_descriptions[selected_param])

        if st.button("Generate IDs"):
            data_expanded, data_mapped = process_data(uploaded_file, partner_id, buffer_percent, grade, district_digits, block_digits, school_digits, student_digits, selected_param)

            # Display results
            st.write("Generated Student IDs:")
            st.dataframe(data_expanded[['School_ID', 'Student_IDs']])

            st.write("Expanded Data with Student Numbers:")
            st.dataframe(data_expanded[['School_ID', 'Student_IDs', 'student_no']])

            st.write("Generated Custom IDs:")
            st.dataframe(data_expanded[['Student_IDs', 'Custom_ID']])

            # Provide download links for the generated files
            towrite1 = io.BytesIO()
            towrite2 = io.BytesIO()
            with pd.ExcelWriter(towrite1, engine='xlsxwriter') as writer:
                data_expanded.to_excel(writer, index=False)
            with pd.ExcelWriter(towrite2, engine='xlsxwriter') as writer:
                data_mapped.to_excel(writer, index=False)

            towrite1.seek(0)
            towrite2.seek(0)

            st.download_button(label="Download Student IDs Excel", data=towrite1, file_name="Student_Ids.xlsx", mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
            st.download_button(label="Download Mapped Student IDs Excel", data=towrite2, file_name="Student_Ids_Mapped.xlsx", mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")

if __name__ == "__main__":
    main()